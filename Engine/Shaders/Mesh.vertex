struct Vertex {
    float3 position;
    float uv_x;
    float3 normal;
    float uv_y;
    float4 color;
};

struct VertexOut {
    float4 position : SV_POSITION;
    float3 outColor : COLOR;
    float2 outUV : TEXCOORD0;
};

// Use a StructuredBuffer to represent the vertex buffer
StructuredBuffer<Vertex> vertexBuffer : register(t0);

// Define the push constants
struct PushConstants {
    float4x4 render_matrix;
};

// Declare the push constants
[[vk::push_constant]]
PushConstants pushConstants;

VertexOut main(uint vertexIndex : SV_VertexID) {
    VertexOut output;

    // Access the vertex from the buffer
    Vertex v = vertexBuffer[vertexIndex];

    // Compute the output values
    output.position = mul(pushConstants.render_matrix, float4(v.position, 1.0f));
    output.outColor = v.color.xyz;
    output.outUV = float2(v.uv_x, v.uv_y);

    return output;
}
